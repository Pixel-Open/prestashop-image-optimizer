<?php
/**
 * Copyright (C) 2025 Pixel DÃ©veloppement
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
if (!defined('_PS_VERSION_')) {
    exit;
}

use PrestaShop\PrestaShop\Core\Module\WidgetInterface;

class Pixel_image_optimizer extends Module implements WidgetInterface
{
    public const CACHE_IMAGE_PATH = 'img' . DIRECTORY_SEPARATOR . 'web';

    protected $templateFile;

    /**
     * Module's constructor.
     */
    public function __construct()
    {
        $this->name = 'pixel_image_optimizer';
        $this->version = '1.0.3';
        $this->author = 'Pixel Open';
        $this->tab = 'front_office_features';
        $this->need_instance = 0;
        $this->bootstrap = true;

        parent::__construct();

        $this->displayName = $this->trans(
            'Image Optimizer',
            [],
            'Modules.Pixelimageoptimizer.Admin'
        );
        $this->description = $this->trans(
            'Image optimizer module is an easy way to resize and compress images on the fly. Use responsive images with size alternatives.',
            [],
            'Modules.Pixelimageoptimizer.Admin'
        );
        $this->ps_versions_compliancy = [
            'min' => '1.7.6.0',
            'max' => _PS_VERSION_,
        ];

        $this->templateFile = 'module:' . $this->name . '/image.tpl';
    }

    /**
     * Install the module
     *
     * @return bool
     */
    public function install(): bool
    {
        return parent::install() && $this->registerHook('displayDashboardToolbarTopMenu');
    }

    /**
     * Use the new translation system
     *
     * @return bool
     */
    public function isUsingNewTranslationSystem(): bool
    {
        return true;
    }

    /***********/
    /** HOOKS **/
    /***********/

    /**
     * Add toolbar buttons
     *
     * @param mixed[] $params
     *
     * @return string
     * @throws Exception
     */
    public function hookDisplayDashboardToolbarTopMenu(array $params): string
    {
        $controller = $this->context->controller;
        $allowed = $controller->controller_type === 'admin' && $controller->php_self === 'AdminPerformance';

        if (!$allowed) {
            return '';
        }

        $buttons = [
            [
                'label' => $this->trans('Clear Image Cache', [], 'Modules.Pixelimageoptimizer.Admin'),
                'route' => 'admin_image_optimizer_clear_cache',
                'class' => 'btn btn-info',
                'icon'  => 'delete'
            ]
        ];

        return $this->get('twig')->render('@Modules/' . $this->name . '/views/templates/admin/toolbar.html.twig', [
            'buttons' => $buttons,
        ]);
    }

    /*********************/
    /** FRONTEND WIDGET **/
    /*********************/

    /**
     * Render the widget
     *
     * @param string|null $hookName
     * @param string[] $configuration
     *
     * @return string
     */
    public function renderWidget($hookName, array $configuration): string
    {
        $imagePath = null;
        $configuration['image'] = null;

        if (isset($configuration['id_image'])) {
            $image = new Image((int)$configuration['id_image']);
            if ($image->getPathForCreation()) {
                $imagePath = $image->getPathForCreation() . '.jpg';
                if (isset($configuration['image_name'])) {
                    $configuration['image_name'] = $image->id . '-' . $configuration['image_name'];
                }
            }
        }

        if (isset($configuration['image_path'])) {
            $imagePath = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . ltrim($configuration['image_path'], '/');
        }

        if ($imagePath) {
            $config = $this->getImageConfig($configuration);

            $configuration['image'] = $this->imageResize(
                $imagePath,
                $config['width'],
                $config['height'],
                $config['quality'],
                $config['image_name'],
                $config['ext']
            );
            $configuration['sources'] = [];

            if (isset($configuration['breakpoints'])) {
                $breakpoints = explode(',', $configuration['breakpoints']);
                foreach ($breakpoints as $breakpoint) {
                    $width = (int)trim($breakpoint);
                    if (!$width) {
                        continue;
                    }
                    $configuration['sources'][$width] = $this->imageResize(
                        $imagePath,
                        $width,
                        $config['height'],
                        $config['quality'],
                        $config['image_name'],
                        $config['ext']
                    );
                }
            }

            krsort($configuration['sources']);
        }

        $template = $configuration['template'] ?? $this->templateFile;

        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));

        return $this->fetch($template);
    }

    /**
     * Retrieve the widget variables
     *
     * @param string $hookName
     * @param string[] $configuration
     *
     * @return string[]
     */
    public function getWidgetVariables($hookName, array $configuration): array
    {
        return [
            'image'   => $configuration['image'],
            'sources' => $configuration['sources'] ?? [],
            'class'   => $configuration['class'] ?? '',
            'alt'     => $configuration['alt'] ?? '',
        ];
    }

    /**
     * Retrieve image configuration
     *
     * @param mixed[] $configuration
     *
     * @return mixed[]
     */
    public function getImageConfig(array $configuration): array
    {
        return [
            'width' => isset($configuration['width']) ? (int)$configuration['width'] : 0,
            'height' => isset($configuration['height']) ? (int)$configuration['height'] : 0,
            'quality' => isset($configuration['quality']) ? (int)$configuration['quality'] : 100,
            'image_name' => $configuration['image_name'] ?? null,
            'ext' => $configuration['ext'] ?? null,
        ];
    }

    /**
     * Resize an image and keep the ratio
     *
     * @param string      $filepath image path with the full absolute path
     * @param int         $maxWidth image maximum width (keep the ratio)
     * @param int         $maxHeight image maximum height (keep the ratio)
     * @param int         $quality between 0 and 100 (only for jpg and webp)
     * @param string|null $newName the new file name (null keep the same file name)
     * @param string|null $toExt convert image to jpg, webp, png, gif (null keep the same extension)
     * @param string      $folder copy resized image in this directory
     *
     * @return string[]|null the image data
     */
    public function imageResize(
        string $filepath,
        int $maxWidth,
        int $maxHeight,
        int $quality = 100,
        string $newName = null,
        string $toExt = null,
        string $folder = self::CACHE_IMAGE_PATH
    ): ?array {
        if (!is_file($filepath)) {
            return null;
        }

        $info = pathinfo(basename($filepath));

        if (!isset($info['extension'], $info['dirname'], $info['filename'])) {
            return null;
        }

        $toExt = $toExt ?: $info['extension'];

        if ($newName !== null) {
            $info['filename'] = $this->formatKey($newName);
        }

        $folder = trim($folder, '/');
        $folder = trim($folder, DIRECTORY_SEPARATOR);

        $resizeDirectory = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . $folder . DIRECTORY_SEPARATOR;

        try {
            $this->mkdir($resizeDirectory);
        } catch (Throwable $throwable) {
            return null;
        }

        if (!is_writable($resizeDirectory)) {
            return null;
        }

        list($origWidth, $origHeight) = getimagesize($filepath);

        $width  = $origWidth;
        $height = $origHeight;

        if ($maxHeight && $height > $maxHeight) {
            $width = ($maxHeight / $height) * $width;
            $height = $maxHeight;
        }

        if ($maxWidth && $width > $maxWidth) {
            $height = ($maxWidth / $width) * $height;
            $width = $maxWidth;
        }

        $file = $info['filename'] . '-' . (int)$width . 'x' . (int)$height . '-' . (int)$quality . '.' . $toExt;
        $destination = $resizeDirectory . $file;

        if (is_file($destination)) {
            return [
                'path'   => str_replace(DIRECTORY_SEPARATOR, '/', $folder) . '/' . $file,
                'width'  => (int)$width,
                'height' => (int)$height,
            ];
        }

        $result = imagecreatetruecolor((int)$width, (int)$height);

        if (!$result) {
            return null;
        }

        $image = null;

        if ($info['extension'] === 'jpg') {
            $image = imagecreatefromjpeg($filepath);
        }
        if ($info['extension'] === 'jpeg') {
            $image = imagecreatefromjpeg($filepath);
        }
        if ($info['extension'] === 'png') {
            $image = imagecreatefrompng($filepath);
        }
        if ($info['extension'] === 'gif') {
            $image = imagecreatefromgif($filepath);
        }

        if (!$image) {
            return null;
        }

        $copy = imagecopyresampled(
            $result,
            $image,
            0,
            0,
            0,
            0,
            (int)$width,
            (int)$height,
            (int)$origWidth,
            (int)$origHeight
        );

        if (!$copy) {
            return null;
        }

        $resized = null;

        if ($toExt === 'jpg') {
            $resized = imagejpeg($result, $destination, $quality);
        }
        if ($toExt === 'jpeg') {
            $resized = imagejpeg($result, $destination, $quality);
        }
        if ($toExt === 'webp') {
            $resized = imagewebp($result, $destination, $quality);
        }
        if ($toExt === 'png') {
            $resized = imagepng($result, $destination);
        }
        if ($toExt === 'gif') {
            $resized = imagegif($result, $destination);
        }

        if (!$resized) {
            return null;
        }

        return [
            'path'   => str_replace(DIRECTORY_SEPARATOR, '/', $folder) . '/' . $file,
            'width'  => (int)$width,
            'height' => (int)$height,
        ];
    }

    /**
     * Create directory
     *
     * @param string $directory
     *
     * @return bool
     * @throws Exception
     */
    public function mkdir(string $directory): bool
    {
        if (!is_dir($directory)) {
            @mkdir($directory, 0777, true);
            $error = error_get_last();
            if (isset($error['message'])) {
                throw new Exception($error['message']);
            }
        }

        return true;
    }

    /**
     * Format a key
     *
     * @param string $value
     * @param string $replace
     *
     * @return string
     */
    public function formatKey(string $value, string $replace = '-'): string
    {
        $string = trim($value, '/');
        $string = strtolower($string);
        $string = strtr($string, $this->getConvertTable());
        $string = preg_replace('#[^a-z0-9]+#i', $replace, $string);

        return trim($string, $replace);
    }

    /**
     * Retrieve chars convert table
     *
     * @return string[]
     */
    public function getConvertTable(): array
    {
        return [
            '&amp;' => 'and',   '@' => 'at',    'Â©' => 'c', 'Â®' => 'r', 'Ã' => 'a',
            'Ã' => 'a', 'Ã' => 'a', 'Ã' => 'a', 'Ã' => 'a', 'Ã' => 'ae','Ã' => 'c',
            'Ã' => 'e', 'Ã' => 'e', 'Ã' => 'e', 'Ã' => 'i', 'Ã' => 'i', 'Ã' => 'i',
            'Ã' => 'i', 'Ã' => 'o', 'Ã' => 'o', 'Ã' => 'o', 'Ã' => 'o', 'Ã' => 'o',
            'Ã' => 'o', 'Ã' => 'u', 'Ã' => 'u', 'Ã' => 'u', 'Ã' => 'u', 'Ã' => 'y',
            'Ã' => 'ss','Ã ' => 'a', 'Ã¡' => 'a', 'Ã¢' => 'a', 'Ã¤' => 'a', 'Ã¥' => 'a',
            'Ã¦' => 'ae','Ã§' => 'c', 'Ã¨' => 'e', 'Ã©' => 'e', 'Ãª' => 'e', 'Ã«' => 'e',
            'Ã¬' => 'i', 'Ã­' => 'i', 'Ã®' => 'i', 'Ã¯' => 'i', 'Ã²' => 'o', 'Ã³' => 'o',
            'Ã´' => 'o', 'Ãµ' => 'o', 'Ã¶' => 'o', 'Ã¸' => 'o', 'Ã¹' => 'u', 'Ãº' => 'u',
            'Ã»' => 'u', 'Ã¼' => 'u', 'Ã½' => 'y', 'Ã¾' => 'p', 'Ã¿' => 'y', 'Ä' => 'a',
            'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'c',
            'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c',
            'Ä' => 'c', 'Ä' => 'd', 'Ä' => 'd', 'Ä' => 'd', 'Ä' => 'd', 'Ä' => 'e',
            'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e',
            'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'g', 'Ä' => 'g', 'Ä' => 'g',
            'Ä' => 'g', 'Ä ' => 'g', 'Ä¡' => 'g', 'Ä¢' => 'g', 'Ä£' => 'g', 'Ä¤' => 'h',
            'Ä¥' => 'h', 'Ä¦' => 'h', 'Ä§' => 'h', 'Ä¨' => 'i', 'Ä©' => 'i', 'Äª' => 'i',
            'Ä«' => 'i', 'Ä¬' => 'i', 'Ä­' => 'i', 'Ä®' => 'i', 'Ä¯' => 'i', 'Ä°' => 'i',
            'Ä±' => 'i', 'Ä²' => 'ij','Ä³' => 'ij','Ä´' => 'j', 'Äµ' => 'j', 'Ä¶' => 'k',
            'Ä·' => 'k', 'Ä¸' => 'k', 'Ä¹' => 'l', 'Äº' => 'l', 'Ä»' => 'l', 'Ä¼' => 'l',
            'Ä½' => 'l', 'Ä¾' => 'l', 'Ä¿' => 'l', 'Å' => 'l', 'Å' => 'l', 'Å' => 'l',
            'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'n',
            'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'o', 'Å' => 'o', 'Å' => 'o',
            'Å' => 'o', 'Å' => 'o', 'Å' => 'o', 'Å' => 'oe','Å' => 'oe','Å' => 'r',
            'Å' => 'r', 'Å' => 'r', 'Å' => 'r', 'Å' => 'r', 'Å' => 'r', 'Å' => 's',
            'Å' => 's', 'Å' => 's', 'Å' => 's', 'Å' => 's', 'Å' => 's', 'Å ' => 's',
            'Å¡' => 's', 'Å¢' => 't', 'Å£' => 't', 'Å¤' => 't', 'Å¥' => 't', 'Å¦' => 't',
            'Å§' => 't', 'Å¨' => 'u', 'Å©' => 'u', 'Åª' => 'u', 'Å«' => 'u', 'Å¬' => 'u',
            'Å­' => 'u', 'Å®' => 'u', 'Å¯' => 'u', 'Å°' => 'u', 'Å±' => 'u', 'Å²' => 'u',
            'Å³' => 'u', 'Å´' => 'w', 'Åµ' => 'w', 'Å¶' => 'y', 'Å·' => 'y', 'Å¸' => 'y',
            'Å¹' => 'z', 'Åº' => 'z', 'Å»' => 'z', 'Å¼' => 'z', 'Å½' => 'z', 'Å¾' => 'z',
            'Å¿' => 'z', 'Æ' => 'e', 'Æ' => 'f', 'Æ ' => 'o', 'Æ¡' => 'o', 'Æ¯' => 'u',
            'Æ°' => 'u', 'Ç' => 'a', 'Ç' => 'a', 'Ç' => 'i', 'Ç' => 'i', 'Ç' => 'o',
            'Ç' => 'o', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u',
            'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Çº' => 'a',
            'Ç»' => 'a', 'Ç¼' => 'ae','Ç½' => 'ae','Ç¾' => 'o', 'Ç¿' => 'o', 'É' => 'e',
            'Ð' => 'jo','Ð' => 'e', 'Ð' => 'i', 'Ð' => 'i', 'Ð' => 'a', 'Ð' => 'b',
            'Ð' => 'v', 'Ð' => 'g', 'Ð' => 'd', 'Ð' => 'e', 'Ð' => 'zh','Ð' => 'z',
            'Ð' => 'i', 'Ð' => 'j', 'Ð' => 'k', 'Ð' => 'l', 'Ð' => 'm', 'Ð' => 'n',
            'Ð' => 'o', 'Ð' => 'p', 'Ð ' => 'r', 'Ð¡' => 's', 'Ð¢' => 't', 'Ð£' => 'u',
            'Ð¤' => 'f', 'Ð¥' => 'h', 'Ð¦' => 'c', 'Ð§' => 'ch','Ð¨' => 'sh','Ð©' => 'sch',
            'Ðª' => '-', 'Ð«' => 'y', 'Ð¬' => '-', 'Ð­' => 'je','Ð®' => 'ju','Ð¯' => 'ja',
            'Ð°' => 'a', 'Ð±' => 'b', 'Ð²' => 'v', 'Ð³' => 'g', 'Ð´' => 'd', 'Ðµ' => 'e',
            'Ð¶' => 'zh','Ð·' => 'z', 'Ð¸' => 'i', 'Ð¹' => 'j', 'Ðº' => 'k', 'Ð»' => 'l',
            'Ð¼' => 'm', 'Ð½' => 'n', 'Ð¾' => 'o', 'Ð¿' => 'p', 'Ñ' => 'r', 'Ñ' => 's',
            'Ñ' => 't', 'Ñ' => 'u', 'Ñ' => 'f', 'Ñ' => 'h', 'Ñ' => 'c', 'Ñ' => 'ch',
            'Ñ' => 'sh','Ñ' => 'sch','Ñ' => '-','Ñ' => 'y', 'Ñ' => '-', 'Ñ' => 'je',
            'Ñ' => 'ju','Ñ' => 'ja','Ñ' => 'jo','Ñ' => 'e', 'Ñ' => 'i', 'Ñ' => 'i',
            'Ò' => 'g', 'Ò' => 'g', '×' => 'a', '×' => 'b', '×' => 'g', '×' => 'd',
            '×' => 'h', '×' => 'v', '×' => 'z', '×' => 'h', '×' => 't', '×' => 'i',
            '×' => 'k', '×' => 'k', '×' => 'l', '×' => 'm', '×' => 'm', '×' => 'n',
            '× ' => 'n', '×¡' => 's', '×¢' => 'e', '×£' => 'p', '×¤' => 'p', '×¥' => 'C',
            '×¦' => 'c', '×§' => 'q', '×¨' => 'r', '×©' => 'w', '×ª' => 't', 'â¢' => 'tm',
        ];
    }
}
